name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  REGISTRY: quay.io/ibotty
  IMAGE_NAME: s3-download-proxy
  ARCHS: amd64


jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # expose on localhost
        - 5432:5432

    steps:
    - uses: actions/checkout@v3

    - name: setup database for tests
      run: ./.ci/setup-test-database.sh
      env:
        PGHOST: 127.0.0.1
        PGPORT: 5432
        PGUSER: postgres
        PGPASSWORD: postgres
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ENDPOINT_URL: ${{ secrets.AWS_ENDPOINT_URL }}
        AWS_S3_FORCE_PATH_STYLE: ${{ secrets.AWS_S3_FORCE_PATH_STYLE }}
        S3_BUCKET: ${{ secrets.S3_BUCKET }}

    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true

    - uses: Swatinem/rust-cache@v2

    - name: Build
      run: cargo build --verbose

    - name: Run tests
      run: cargo test --verbose
      env:
        DATABASE_URL: postgres://bot-download-proxy:pass@127.0.0.1:5432/postgres
        S3_BUCKET: ${{ secrets.S3_BUCKET }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ENDPOINT_URL: ${{ secrets.AWS_ENDPOINT_URL }}
        AWS_S3_FORCE_PATH_STYLE: ${{ secrets.AWS_S3_FORCE_PATH_STYLE }}

    - name: Cargo fmt
      run: cargo fmt --all -- --check

    - name: Clippy
      run: cargo clippy --all-features

  release:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
    - uses: Swatinem/rust-cache@v2
    - name: Build
      run: cargo build --release

    - name: Log into registry
      uses: redhat-actions/podman-login@v1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.QUAY_USERNAME }}
        password: ${{ secrets.QUAY_PASSWORD }}

    - name: Set up qemu for multi-arch
      run: |
        sudo apt-get update
        sudo apt-get install -y qemu-user-static
      if: ${{ env.ARCHS != 'amd64' }}

    - name: Build container
      id: build-image
      uses: redhat-actions/buildah-build@v2
      with:
        image: ${{ env.IMAGE_NAME }}
        tags: "latest"
        archs: ${{ env.ARCHS }}
        oci: true
        containerfiles: ./Containerfile

    - name: push to registry
      uses: redhat-actions/push-to-registry@v2
      with:
        image: ${{ steps.build-image.outputs.image }}
        tags: ${{ steps.build-image.outputs.tags }}
        registry: ${{ env.REGISTRY }}
